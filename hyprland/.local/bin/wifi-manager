#!/bin/bash

# WiFi Manager for Waybar
# Provides WiFi connection management via nmcli

show_menu() {
    # Get current connection status
    current_ssid=$(nmcli -t -f active,ssid dev wifi | egrep '^yes' | cut -d: -f2)
    
    # Get available networks
    networks=$(nmcli -t -f ssid,signal,security dev wifi list --rescan yes | sort -t: -k2 -nr | head -15)
    
    # Build rofi menu
    menu_items=""
    menu_items+="󰅖 Cancel\n"
    menu_items+="---\n"
    
    if [ -n "$current_ssid" ]; then
        menu_items+="󰖪 Disconnect from $current_ssid\n"
        menu_items+="󰍆 Refresh networks\n"
        menu_items+="---\n"
    else
        menu_items+="󰍆 Refresh networks\n"
        menu_items+="---\n"
    fi
    
    # Add available networks
    while IFS=: read -r ssid signal security; do
        if [ -n "$ssid" ] && [ "$ssid" != "--" ]; then
            # Choose icon based on signal strength
            if [ "$signal" -gt 75 ]; then
                icon="󰤨"
            elif [ "$signal" -gt 50 ]; then
                icon="󰤥"
            elif [ "$signal" -gt 25 ]; then
                icon="󰤢"
            else
                icon="󰤟"
            fi
            
            # Add security icon
            if [[ "$security" == *"WPA"* ]] || [[ "$security" == *"WEP"* ]]; then
                security_icon="󰌋"
            else
                security_icon=""
            fi
            
            # Mark current connection
            if [ "$ssid" = "$current_ssid" ]; then
                menu_items+="󰱇 $ssid $icon ($signal%) $security_icon\n"
            else
                menu_items+="$ssid $icon ($signal%) $security_icon\n"
            fi
        fi
    done <<< "$networks"
    
    # Show menu
    chosen=$(echo -e "$menu_items" | wofi --dmenu --prompt "WiFi Networks" --width 400)
    
    if [ -n "$chosen" ]; then
        if [[ "$chosen" == "󰅖 Cancel" ]]; then
            # User cancelled, exit gracefully
            exit 0
        elif [[ "$chosen" == "󰖪 Disconnect"* ]]; then
            nmcli dev disconnect $(nmcli -t -f device,type dev | grep wifi | cut -d: -f1 | head -1)
            notify-send "WiFi" "Disconnected from WiFi network"
        elif [[ "$chosen" == "󰍆 Refresh"* ]]; then
            show_menu
        elif [[ "$chosen" == "󰱇"* ]]; then
            # Already connected
            notify-send "WiFi" "Already connected to this network"
        elif [[ "$chosen" != "---" ]]; then
            # Extract SSID from chosen option
            ssid=$(echo "$chosen" | sed 's/^[^ ]* //' | sed 's/ 󰤨.*$//' | sed 's/ 󰤥.*$//' | sed 's/ 󰤢.*$//' | sed 's/ 󰤟.*$//')
            
            # Check if network requires password
            security=$(nmcli -t -f ssid,security dev wifi list | grep "^$ssid:" | cut -d: -f2)
            
            if [[ "$security" == *"WPA"* ]] || [[ "$security" == *"WEP"* ]]; then
                # Network requires password
                password=$(echo "" | wofi --dmenu --prompt "Password for $ssid" --password --width 300)
                if [ -n "$password" ]; then
                    if nmcli dev wifi connect "$ssid" password "$password"; then
                        notify-send "WiFi" "Connected to $ssid"
                    else
                        notify-send "WiFi" "Failed to connect to $ssid" -u critical
                    fi
                fi
            else
                # Open network
                if nmcli dev wifi connect "$ssid"; then
                    notify-send "WiFi" "Connected to $ssid"
                else
                    notify-send "WiFi" "Failed to connect to $ssid" -u critical
                fi
            fi
        fi
    fi
}

case "$1" in
    "menu")
        show_menu
        ;;
    "status")
        # Get WiFi status for waybar
        wifi_device=$(nmcli -t -f device,type dev | grep wifi | cut -d: -f1 | head -1)
        if [ -n "$wifi_device" ]; then
            connection_state=$(nmcli -t -f device,state dev | grep "$wifi_device" | cut -d: -f2)
            if [ "$connection_state" = "connected" ]; then
                ssid=$(nmcli -t -f active,ssid dev wifi | grep '^yes' | cut -d: -f2)
                signal=$(nmcli -t -f active,signal dev wifi | grep '^yes' | cut -d: -f2)
                echo "{\"text\":\"$ssid ($signal%)\",\"tooltip\":\"Connected to $ssid\\nSignal: $signal%\",\"class\":\"connected\"}"
            else
                echo "{\"text\":\"Disconnected\",\"tooltip\":\"WiFi disconnected\",\"class\":\"disconnected\"}"
            fi
        else
            echo "{\"text\":\"No WiFi\",\"tooltip\":\"No WiFi device found\",\"class\":\"disabled\"}"
        fi
        ;;
    *)
        echo "Usage: $0 {menu|status}"
        exit 1
        ;;
esac