#!/bin/bash
# Safe suspend script that ensures screen is locked first
# Logs events and handles both manual and automatic suspend

LOCK_SCRIPT="$HOME/.local/bin/blur-lock"
LOG_FILE="$HOME/.local/share/suspend.log"
MAX_WAIT=5  # Maximum seconds to wait for lock

# Create log directory
mkdir -p "$(dirname "$LOG_FILE")"

echo "$(date): Initiating safe suspend..." >> "$LOG_FILE"

# Function to check if swaylock is running
is_locked() {
    pgrep -x swaylock > /dev/null
}

# If already locked, just suspend
if is_locked; then
    echo "$(date): Already locked, suspending immediately..." >> "$LOG_FILE"
    systemctl suspend
    exit 0
fi

# Start the lock screen
echo "$(date): Starting lock screen..." >> "$LOG_FILE"
$LOCK_SCRIPT &
LOCK_PID=$!

# Wait for swaylock to actually start
wait_count=0
while [ $wait_count -lt $MAX_WAIT ]; do
    if is_locked; then
        echo "$(date): Lock screen confirmed active, suspending..." >> "$LOG_FILE"
        systemctl suspend
        exit 0
    fi
    sleep 0.5
    wait_count=$((wait_count + 1))
done

# If we get here, lock didn't start properly
echo "$(date): Warning: Lock screen may not have started, suspending anyway..." >> "$LOG_FILE"
systemctl suspend
