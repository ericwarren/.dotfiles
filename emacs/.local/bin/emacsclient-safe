#!/bin/bash
# Safe emacsclient wrapper that handles socket errors gracefully

# Possible socket locations
SOCKET_PATHS=(
    "${XDG_RUNTIME_DIR:-/run/user/$(id -u)}/emacs/server"
    "/tmp/emacs$(id -u)/server"
    "$HOME/.emacs.d/server"
)

# Function to find working socket
find_socket() {
    for socket in "${SOCKET_PATHS[@]}"; do
        if [ -S "$socket" ] && emacsclient --socket-name="$socket" --eval nil &>/dev/null; then
            echo "$socket"
            return 0
        fi
    done
    return 1
}

# Function to ensure daemon is running
ensure_daemon() {
    # Check if systemd service is available and use it
    if systemctl --user is-enabled emacs.service &>/dev/null; then
        if ! systemctl --user is-active emacs.service &>/dev/null; then
            echo "Starting Emacs daemon via systemd..." >&2
            systemctl --user start emacs.service
            sleep 2
        fi
    else
        # Fallback to manual daemon start
        if ! pgrep -f "emacs.*--daemon" &>/dev/null; then
            echo "Starting Emacs daemon..." >&2
            emacs --daemon &
            sleep 3
        fi
    fi
}

# Main logic
main() {
    # First try to find existing socket
    if socket=$(find_socket); then
        exec emacsclient --socket-name="$socket" "$@"
    fi
    
    # No socket found, ensure daemon is running
    ensure_daemon
    
    # Wait for socket to appear (up to 10 seconds)
    for i in {1..10}; do
        if socket=$(find_socket); then
            exec emacsclient --socket-name="$socket" "$@"
        fi
        sleep 1
    done
    
    # Last resort - try without socket specification
    echo "Warning: Could not find socket, trying default emacsclient..." >&2
    exec emacsclient "$@"
}

main "$@"