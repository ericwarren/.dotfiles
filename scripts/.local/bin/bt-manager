#!/bin/bash
# Bluetooth Manager Script
# Save as ~/.local/bin/bt-manager and make executable: chmod +x ~/.local/bin/bt-manager

SCRIPT_NAME="bt-manager"
NOTIFICATION_ID=12345

show_help() {
    echo "Bluetooth Manager - Simple Bluetooth control script"
    echo ""
    echo "Usage: $SCRIPT_NAME [COMMAND]"
    echo ""
    echo "Commands:"
    echo "  status          Show Bluetooth status"
    echo "  toggle          Toggle Bluetooth on/off"
    echo "  on              Turn Bluetooth on"
    echo "  off             Turn Bluetooth off"
    echo "  scan            Scan for devices (10 seconds)"
    echo "  list            List paired devices"
    echo "  list-available  List available devices to pair"
    echo "  connect <MAC>   Connect to device by MAC address"
    echo "  disconnect <MAC> Disconnect device by MAC address"
    echo "  pair <MAC>      Pair with device by MAC address"
    echo "  unpair <MAC>    Unpair device by MAC address"
    echo "  menu            Show interactive menu (using rofi)"
    echo "  gui             Open blueman-manager GUI"
    echo ""
    echo "Examples:"
    echo "  $SCRIPT_NAME toggle"
    echo "  $SCRIPT_NAME scan"
    echo "  $SCRIPT_NAME connect 00:11:22:33:44:55"
    echo "  $SCRIPT_NAME menu"
}

# Check if bluetoothctl is available
if ! command -v bluetoothctl &> /dev/null; then
    echo "Error: bluetoothctl is not installed"
    echo "Install with: sudo apt install bluez"
    exit 1
fi

# Check if notification daemon is available
notify() {
    if command -v notify-send &> /dev/null; then
        notify-send -r $NOTIFICATION_ID "Bluetooth" "$1"
    else
        echo "$1"
    fi
}

get_power_status() {
    bluetoothctl show | grep "Powered:" | awk '{print $2}'
}

get_connected_devices() {
    bluetoothctl devices Connected | awk '{print $2 " " $3}'
}

get_paired_devices() {
    bluetoothctl devices Paired | awk '{print $2 " " $3}'
}

bluetooth_status() {
    local power_status=$(get_power_status)
    local connected_devices=$(get_connected_devices)

    echo "Bluetooth Power: $power_status"

    if [ "$power_status" = "yes" ]; then
        if [ -n "$connected_devices" ]; then
            echo "Connected devices:"
            echo "$connected_devices" | while read mac name; do
                echo "  $name ($mac)"
            done
        else
            echo "No devices connected"
        fi
    fi
}

bluetooth_toggle() {
    local current_status=$(get_power_status)

    if [ "$current_status" = "yes" ]; then
        echo "power off" | bluetoothctl
        notify "Bluetooth turned off"
    else
        echo "power on" | bluetoothctl
        notify "Bluetooth turned on"
    fi
}

bluetooth_on() {
    echo "power on" | bluetoothctl
    notify "Bluetooth turned on"
}

bluetooth_off() {
    echo "power off" | bluetoothctl
    notify "Bluetooth turned off"
}

bluetooth_scan() {
    local power_status=$(get_power_status)

    if [ "$power_status" != "yes" ]; then
        echo "Turning on Bluetooth..."
        bluetooth_on
        sleep 2
    fi

    echo "Scanning for devices for 10 seconds..."
    notify "Scanning for Bluetooth devices..."

    (
        echo "scan on"
        sleep 10
        echo "scan off"
    ) | bluetoothctl

    notify "Scan complete"
    echo "Available devices:"
    bluetoothctl devices | awk '{print $2 " " $3}'
}

bluetooth_connect() {
    local mac=$1
    if [ -z "$mac" ]; then
        echo "Error: MAC address required"
        echo "Usage: $SCRIPT_NAME connect <MAC>"
        return 1
    fi

    echo "connect $mac" | bluetoothctl

    # Check if connection was successful
    sleep 2
    if bluetoothctl devices Connected | grep -q "$mac"; then
        local device_name=$(bluetoothctl devices | grep "$mac" | awk '{print $3}')
        notify "Connected to $device_name"
    else
        notify "Failed to connect to device"
    fi
}

bluetooth_disconnect() {
    local mac=$1
    if [ -z "$mac" ]; then
        echo "Error: MAC address required"
        echo "Usage: $SCRIPT_NAME disconnect <MAC>"
        return 1
    fi

    echo "disconnect $mac" | bluetoothctl
    local device_name=$(bluetoothctl devices | grep "$mac" | awk '{print $3}')
    notify "Disconnected from $device_name"
}

bluetooth_pair() {
    local mac=$1
    if [ -z "$mac" ]; then
        echo "Error: MAC address required"
        echo "Usage: $SCRIPT_NAME pair <MAC>"
        return 1
    fi

    echo "pair $mac" | bluetoothctl
}

bluetooth_unpair() {
    local mac=$1
    if [ -z "$mac" ]; then
        echo "Error: MAC address required"
        echo "Usage: $SCRIPT_NAME unpair <MAC>"
        return 1
    fi

    echo "remove $mac" | bluetoothctl
    local device_name=$(bluetoothctl devices | grep "$mac" | awk '{print $3}')
    notify "Unpaired $device_name"
}

bluetooth_menu() {
    if ! command -v rofi &> /dev/null; then
        echo "Error: rofi is not installed"
        echo "Install with: sudo pacman -S rofi"
        return 1
    fi

    local power_status=$(get_power_status)
    local options=""

    if [ "$power_status" = "yes" ]; then
        options+="Turn Off\n"
        options+="Scan for Devices\n"

        # Add connected devices with disconnect option
        local connected=$(get_connected_devices)
        if [ -n "$connected" ]; then
            options+="--- Connected Devices ---\n"
            echo "$connected" | while read mac name; do
                options+="Disconnect $name\n"
            done
        fi

        # Add paired but not connected devices
        local paired=$(get_paired_devices)
        if [ -n "$paired" ]; then
            options+="--- Paired Devices ---\n"
            echo "$paired" | while read mac name; do
                if ! echo "$connected" | grep -q "$mac"; then
                    options+="Connect $name\n"
                fi
            done
        fi
    else
        options+="Turn On\n"
    fi

    options+="Open GUI\n"

    local choice=$(echo -e "$options" | rofi -dmenu -p "Bluetooth")

    case "$choice" in
        "Turn On") bluetooth_on ;;
        "Turn Off") bluetooth_off ;;
        "Scan for Devices") bluetooth_scan ;;
        "Open GUI") blueman-manager ;;
        "Connect "*)
            local device_name=$(echo "$choice" | sed 's/Connect //')
            local mac=$(get_paired_devices | grep "$device_name" | awk '{print $1}')
            bluetooth_connect "$mac"
            ;;
        "Disconnect "*)
            local device_name=$(echo "$choice" | sed 's/Disconnect //')
            local mac=$(get_connected_devices | grep "$device_name" | awk '{print $1}')
            bluetooth_disconnect "$mac"
            ;;
    esac
}

# Main command handling
case "${1:-status}" in
    "help"|"-h"|"--help")
        show_help
        ;;
    "status")
        bluetooth_status
        ;;
    "toggle")
        bluetooth_toggle
        ;;
    "on")
        bluetooth_on
        ;;
    "off")
        bluetooth_off
        ;;
    "scan")
        bluetooth_scan
        ;;
    "list")
        echo "Paired devices:"
        get_paired_devices | while read mac name; do
            echo "  $name ($mac)"
        done
        ;;
    "list-available")
        echo "Available devices:"
        bluetoothctl devices | awk '{print $2 " " $3}'
        ;;
    "connect")
        bluetooth_connect "$2"
        ;;
    "disconnect")
        bluetooth_disconnect "$2"
        ;;
    "pair")
        bluetooth_pair "$2"
        ;;
    "unpair")
        bluetooth_unpair "$2"
        ;;
    "menu")
        bluetooth_menu
        ;;
    "gui")
        blueman-manager &
        ;;
    *)
        echo "Unknown command: $1"
        echo "Use '$SCRIPT_NAME help' for usage information"
        exit 1
        ;;
esac